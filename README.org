#+title: README.org

A lot of parts borrowed from [[https://github.com/TechDufus/dotfiles][GitHub - TechDufus/dotfiles: Fully automated development environment for Tech...]]

* Reqirements
** Operating System
This ansible playbook only supports =Ubuntu|Debian|Arch|Manjaro= distribution. This is by
design to provide a consistent development experience across hosts.

** System Upgrade
Verify your =Ubuntu|Debian|Arch|Manjaro= installation has all latest packages
installed before running the playbook.

* Setup
** all.yml values file
The =all.yml= file allows you to personalize your setup to your needs. This file
will be created in the file located at ~~/.dotfiles/group_vars/all.yml~ after
you install this dotfiles and include your desired settings.

Below is a list of all available values. Not all are required but incorrect
values will break the playbook if not properly set.

| Name           | Type                           | Required |
|----------------+--------------------------------+----------|
| git_user_email | string                         | yes      |
| git_user_name  | string                         | yes      |
| exclude_roles  | array (see group_vars/all.yml) | no       |
| ssh_key        | dict (see SSH Keys below)      | no       |
| system_host    | dict (see System Hosts below)  | no       |
| bash_public    | dict (see Environment below)   | no       |
| bash_private   | dict (see Environment below)   | no       |

*** Environment
Manage environment variables by configuring the =bash_public= and =bash_private=
values in =values.yaml=.

**** bash_public
The =bash_public= value allows you to include a dictionary of generic and
unsecure key-value pairs that will be stored in a ~~/.bash_public~.

#+begin_src yaml
---
bash_public:
  MY_ENV_VAR: something
#+end_src

**** bash_private
The =bash_private= value allows you to include a dictionary of secure key-value
pairs that will be stored in a ~~/.bash_private~.

#+begin_src yaml
---
bash_private:
  MY_ENV_VAR_SECRET: !vault |
    $ANSIBLE_VAULT;1.1;AES256
    62333533626436313366316235626561626635396233303730343332666466393561346462303163
    3666636638613437353663356563656537323136646137630a336332303030323031376164316562
    65333963633339323382938472963766303966643035303234376163616239663539366564396166
    3830376265316231630a623834333061393138306331653164626437623337366165636163306237
    3437
#+end_src

*** SSH Keys
Manage SSH keys be setting the =ssh_key= value in ~values.yaml~ shown as example below:

#+begin_src yaml
---
ssh_key:
  <filename>: !vault |
    $ANSIBLE_VAULT;1.1;AES256
    62333533626436313366316235626561626635396233303730343332666466393561346462303163
    3666636638613437483928376563656537323136646137630a336332303030323031376164316562
    65333963633339323762663865363766303966643035303234376163616239663539366564396166
    3830376265316231630a623834333061393138306331653164626437623337366165636163306237
    3437
#+end_src

NOTE: All ssh keys will be stored at ~$HOME/.ssh/<filename>~.

*** System Hosts
Manage ~/etc/hosts~ by setting the =system_host= value in ~values.yaml~.

#+begin_src yaml
---
system_host:
  127.0.0.1: foobar.localhost
#+end_src

** Examples
Below includes minimal and advanced configuration examples.

*** Minimal
Below is a minimal example of ~values.yaml~ file:

#+begin_src yaml
---
git_user_email: foo@bar.com
git_user_name: Foo Bar
#+end_src

*** Advanced
Below is a more advanced example of ~values.yaml~ file:

#+begin_src yaml
---
git_user_email: foo@bar.com
git_user_name: Foo Bar
exclude_roles:
  - slack
ssh_key: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  62333533626436313366316235626561626635396233303730343332666466393561346462303163
  3666636638613437353663356563656537323136646137630a336332303030323031376164316562
  65333963633339323762663865363766303966643035303234376163616239663539366564396166
  3830376265316231630a623834333061393138306331653164626437623337366165636163306237
  3437
system_host:
  127.0.0.1: foobar.localhost
bash_public:
  MY_PUBLIC_VAR: foobar
bash_private:
  MY_SECRET_VAR: !vault |
    $ANSIBLE_VAULT;1.1;AES256
    62333533626436313366316235626561626635396233303730343332666466393561346462303163
    3666636638613437353663356563656537323136646137630a336332303030323031376164316562
    65333963633339323762663865363766303966643035303234376163616239663539366564396166
    3830376265316231630a623834333061393138306331653164626437623337366165636163306237
    3437
#+end_src

** vault.secret
The ~vault.secret~ file allows you to encrypt values with =Ansible vault= and
store them securely in source control. Create a file located at
~~/.config/ansible-vault/dotfiles.secret~ with a secure password in it.

#+begin_src bash
vim ~/.ansible-vault/dotfiles.secret
#+end_src

To then encrypt values with your vault password use the following:

#+begin_src bash
$ ansible-vault encrypt_string --vault-password-file $HOME/.ansible-vault/dotfiles.secret "mynewsecret" --name "MY_SECRET_VAR"
$ cat myfile.conf | ansible-vault encrypt_string --vault-password-file $HOME/.ansible-vault/dotfiles.secret --stdin-name "myfile"
#+end_src

NOTE: This file will automatically be detected be the playbook when running
=dotfiles= command to decrypt values. Read more on Ansible Vault [[https://docs.ansible.com/ansible/latest/user_guide/vault.html][here]].

* Usage
** Install
This playbook includes a custom shell script located at ~bin/dotfiles~. This
script is added to your $PATH after installation and can be run multiple times
while making sure any Ansible dependencies are installed and updated.

This shell script is also used to initialize your environment after installing
=Ubuntu|Debian|Arch= and performing a full system upgrade as mentioned above.

NOTE: You must follow required steps before running this command or things may
become unusable until fixed.

#+begin_src bash
bash -c "$(curl -fsSL https://github.com/oggers/dotfiles.git  bin/dotfiles)"
#+end_src

If you want to run only a specific role, you can specify the following bash
command:

#+begin_src bash
curl -fsSL https://github.com/oggers/dotfiles.git bin/dotfiles | bash -s -- --tags comma,separated,tags
#+end_src

** Update
This repository is continuously updated with new features and settings which
become available to you when updating.

To update your environment run the ~dotfiles~ command in your shell:

#+begin_src bash
dotfiles
#+end_src

This will handle the following tasks:

- Verify Ansible is up-to-date.
- Generate SSH keys and add to ~~/.ssh/authorized_keys~
- Clone this repository locally to ~~/.dotfiles~
- Verify any ~ansible-galaxy~ plugins are updated
- Run this playbook with the values in ~~/.config/dotfiles/group_vars/all.yaml~

This ~dotfiles~ command is available to you after the first use of this repo, as
it adds this repo's ~bin~ directory to your path, allowing you to call
~dotfiles~ from anywhere.

Any flags or arguments you pass to the ~dotfiles~ command are passed as-is to
the ~ansible-playbook~ command.

For example: running the emacs tag with verbosity:

#+begin_src bash
dotfiles -t emacs -vvv
#+end_src
